name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest

    env:
      # Use production Prisma schema for deploy (PostgreSQL)
      PRISMA_SCHEMA_PATH: api/prisma/schema.prod.prisma

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install API deps and prepare Prisma for production deploy
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: List API structure (precheck)
        run: |
          echo "== API root =="
          ls -la ./api
          echo "== Functions =="
          ls -la ./api/functions || true
          echo "== customers function.json =="
          cat ./api/functions/customers/function.json || true
          echo "== orders function.json =="
          cat ./api/functions/orders/function.json || true
          echo "== ping function.json =="
          cat ./api/functions/ping/function.json || true

      - name: Install API dependencies
        working-directory: ./api
        run: npm ci --omit=dev

      - name: Re-ensure Prisma schema after install (defensive)
        working-directory: ./api
        run: |
          mkdir -p prisma
          cp -f prisma/schema.prod.prisma prisma/schema.prisma

      - name: Generate Prisma Client (prod schema)
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx prisma generate --schema ./prisma/schema.prisma

      - name: Run Prisma Migrate Deploy (prod)
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx prisma migrate deploy --schema ./prisma/schema.prisma

      # Build frontend (CRA) - SWA action can build automatically, but we pre-build explicitly
      - name: Install Frontend dependencies
        run: npm ci

      - name: Build Frontend
        run: npm run build

      - name: Verify API paths before deploy
        run: |
          test -d ./api/functions || (echo "Missing ./api/functions" && exit 1)
          test -f ./api/functions/ping/function.json || (echo "Missing ping function.json" && exit 1)
          test -f ./api/functions/ping/index.js || (echo "Missing ping index.js" && exit 1)
          echo "API artifacts present."

      - name: Build and Deploy SWA (frontend only)
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy_functions_app:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Zip function app package
        run: |
          cd api
          zip -r ../functionapp.zip .

      - name: Deploy to Azure Function App (user-provided backend)
        uses: Azure/functions-action@v3
        with:
          app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
          package: functionapp.zip
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          scm-do-build-during-deployment: true

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Close Pull Request
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
          app_location: "/"
          api_location: "api"
