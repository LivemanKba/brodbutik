name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest

    env:
      # Use production Prisma schema for deploy (PostgreSQL)
      PRISMA_SCHEMA_PATH: api/prisma/schema.prod.prisma

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install API deps and prepare Prisma for production deploy
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: List API structure (precheck)
        run: |
          echo "== API root =="
          ls -la ./api
          echo "== Functions =="
          ls -la ./api/functions || true
          echo "== customers function.json =="
          cat ./api/functions/customers/function.json || true
          echo "== orders function.json =="
          cat ./api/functions/orders/function.json || true
          echo "== ping function.json =="
          cat ./api/functions/ping/function.json || true

      - name: Install API dependencies
        working-directory: ./api
        run: npm ci --omit=dev

      - name: Re-ensure Prisma schema after install (defensive)
        working-directory: ./api
        run: |
          mkdir -p prisma
          cp -f prisma/schema.prod.prisma prisma/schema.prisma

      - name: Generate Prisma Client (prod schema)
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx prisma generate --schema ./prisma/schema.prisma

      - name: Run Prisma Migrate Deploy (prod)
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx prisma migrate deploy --schema ./prisma/schema.prisma

      # Build frontend (CRA) - SWA action can build automatically, but we pre-build explicitly
      - name: Install Frontend dependencies
        run: npm ci

      - name: Build Frontend
        run: npm run build

      - name: Verify API paths before deploy
        run: |
          test -d ./api/functions || (echo "Missing ./api/functions" && exit 1)
          test -f ./api/functions/ping/function.json || (echo "Missing ping function.json" && exit 1)
          test -f ./api/functions/ping/index.js || (echo "Missing ping index.js" && exit 1)
          echo "API artifacts present."

      - name: Build and Deploy SWA (frontend only)
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy_functions_app:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Zip function app package
        run: |
          cd api
          zip -r ../functionapp.zip .

      - name: Extract Kudu credentials and host from publish profile
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          xml='${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}'
          # Extract credentials
          user=$(echo "$xml" | sed -n 's/.*userName="\([^"]*\)".*/\1/p' | head -n1)
          pass=$(echo "$xml" | sed -n 's/.*userPWD="\([^"]*\)".*/\1/p' | head -n1)
          # Prefer ZipDeploy publishUrl which already points at the SCM host (may include :443)
          zipPublish=$(echo "$xml" | sed -n 's/.*publishMethod="ZipDeploy" publishUrl="\([^"]*\)".*/\1/p' | head -n1)
          hostPort="$zipPublish"
          if [[ -z "$hostPort" ]]; then
            hostPort=$(echo "$xml" | sed -n 's/.*publishMethod="MSDeploy" publishUrl="\([^"]*\)".*/\1/p' | head -n1)
          fi
          host=$(echo "$hostPort" | awk -F: '{print $1}')
          # Ensure SCM subdomain exists and remove any accidental double dots
          if [[ "$host" != *".scm."* ]]; then
            host=$(echo "$host" | sed 's/^\([^\.]*\)\./\1.scm./')
          fi
          host=$(echo "$host" | sed 's/\.scm\./.scm./; s/\.\././g')
          if [[ -z "$user" || -z "$pass" || -z "$host" ]]; then
            echo "Failed to parse publish profile"; exit 1
          fi
          echo "Using SCM host: $host"
          echo "user=$user" >> $GITHUB_OUTPUT
          echo "pass=$pass" >> $GITHUB_OUTPUT
          echo "scm=$host" >> $GITHUB_OUTPUT

      - name: Zip Deploy to Kudu (SCM) via curl
        shell: bash
        env:
          KUDU_USER: ${{ steps.extract.outputs.user }}
          KUDU_PASS: ${{ steps.extract.outputs.pass }}
          KUDU_HOST: ${{ steps.extract.outputs.scm }}
        run: |
          set -euo pipefail
          # Normalize any accidental double dots in host to avoid DNS failures
          KUDU_HOST="$(echo "${KUDU_HOST}" | sed 's/\.\./\./g')"
          echo "Using SCM host: ${KUDU_HOST}"
          url="https://${KUDU_HOST}/api/zipdeploy"
          echo "Deploying to $url"
          http_code=$(curl -sS -u "$KUDU_USER:$KUDU_PASS" \
            -X POST "$url" \
            --retry 3 --retry-all-errors \
            -H "Content-Type: application/zip" \
            --data-binary @functionapp.zip -o /dev/null -w "%{http_code}")
          echo "ZipDeploy HTTP $http_code"
          if [[ "$http_code" != "200" && "$http_code" != "202" ]]; then
            echo "ZipDeploy failed with HTTP $http_code"; exit 1
          fi

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Close Pull Request
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
          app_location: "/"
          api_location: "api"
