name: Azure App Service - Build and Deploy (React build/)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20.x' # Match your App Service "Runtime Stack" (Node - 20-lts)

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build React app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Clean previous build (cache-busting)
        run: rm -rf build

      - name: Install dependencies
        run: npm ci

      - name: Build (production)
        run: |
          npm run build
          # touch a cache-busting marker so index.html changes are always fresh
          echo "built_at=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" > build/build-info.txt

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Azure App Service (serve build/)
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: build

      # IMPORTANT:
      # 1) In your App Service (Linux) Configuration:
      #    - Application setting: WEBSITES_PORT = 8080
      #    - Startup Command: npx serve -s build -l 8080
      # 2) Add secret AZUREAPPSERVICE_PUBLISHPROFILE in the repo with your publish profile XML.
      # 3) Set the app-name below to your App Service name exactly as in Azure Portal.

      - name: Deploy build/ to App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: brodbutiken-webapp
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
          package: ./build

      - name: Verify deployed HTML contains expected title
        run: |
          set -e
          # Use your actual default domain including region segment
          URL="https://brodbutiken-webapp-hna0fxgdcxdzeug3.swedencentral-01.azurewebsites.net"
          echo "Fetching $URL ..."
          # retry a few times to tolerate cold start
          for i in 1 2 3 4 5 6 7 8; do
            HTTP_CODE=$(curl -sS -o /tmp/index.html -w "%{http_code}" "$URL" || true)
            if [ "$HTTP_CODE" = "200" ]; then
              break
            fi
            echo "Attempt $i: HTTP $HTTP_CODE, waiting 6s..."
            sleep 6
          done
          if [ ! -f /tmp/index.html ]; then
            echo "No index.html downloaded â€” service may still be starting or URL is wrong."
            exit 1
          fi
          if ! grep -q "<title>Nisses Bakery</title>" /tmp/index.html; then
            echo "Deployed index.html does not contain expected title. Dumping first lines:"
            head -n 80 /tmp/index.html || true
            exit 1
          fi
          echo "Verification passed: found expected title."